https://djangoforbeginners.com/message-board/


Django provides built-in support for several types of database backends. 
With just a few lines in our settings.py file it can support PostgreSQL, MySQL, Oracle, or SQLite. 
But the simplest–by far–to use is SQLite because it runs off a single file and requires no complex installation. 
By contrast, the other options require a process to be running in the background and can be quite complex to properly configure. 
Django uses SQLite by default for this reason and it’s a perfect choice for small projects.

$ cd ~/Desktop
$ mkdir mb
$ cd mb
$ pipenv install django==2.1.5
$ pipenv shell
(mb) $ django-admin startproject mb_project .
(mb) $ python manage.py startapp posts

Aside: Technically a db.sqlite3 file is created the first time you run either migrate or runserver. 
Using runserver configures a database using Django’s default settings, however migrate will sync the database 
with the current state of any database models contained in the project and listed in INSTALLED_APPS. 
In other words, to make sure the database reflects the current state of your project you’ll need to run migrate (and also makemigrations) 
each time you update a model. More on this shortly.


Create a database model
Our first task is to create a database model where we can store and display posts from our users. 
Django will turn this model into a database table for us. 
In real-world Django projects, it’s often the case that there will be many complex, interconnected database models 
but in our simple message board app we only need one.

I won’t cover database design in this book but I have written a short guide which you can find here if this is all new to you.

Open the posts/models.py file and look at the default code which Django provides:


Django imports a module models to help us build new database models, which will “model” the characteristics of the data in our database. 
We want to create a model to store the textual content of a message board post, which we can do so as follows:

from django.db import models

class Post(models.Model):
    text = models.TextField()


Activating models
Now that our new model is created we need to activate it. 
Going forward, whenever we create or modify an existing model we’ll need to update Django in a two-step process.


First we create a migration file with the makemigrations command which generate the SQL commands for preinstalled apps in our INSTALLED_APPS setting. Migration files do not execute those commands on our database file, rather they are a reference of all new changes to our models. 
This approach means that we have a record of the changes to our models over time.

Second we build the actual database with migrate which does execute the instructions in our migrations file.


(mb) $ python manage.py makemigrations posts
(mb) $ python manage.py migrate

Note that you don’t have to include a name after makemigrations. 
If you simply run the command it will apply to all available changes. 
But it’s a good habit to be specific. 
If we had two separate apps in our project, and updated the models in both, and then ran makemigrations.
it would generate a migrations file containing data on both changes. 
This makes debugging harder in the future. 
You want each migration file to be as small and isolated as possible. 
That way if you need to look at past migrations, there is only one change per migration rather than one that applies to multiple apps.



Django Admin
Django provides us with a robust admin interface for interacting with our database. 
This is a truly killer feature that few web frameworks offer. 
It has its routes in Django’s origin as a project at a newspaper. 
The developers wanted a CMS (Content Management System) so that journalists could write and edit their stories without needing to touch “code.” 
Over time the built-in admin app has evolved into a fantastic, out-of-the-box tool for managing all aspects of a Django project.

To use the Django admin, we first need to create a superuser who can login. 
In your command line console, type 
									python manage.py createsuperuser 
and respond to the prompts for a username, email, and password:

django admin crredentials

username:rajesh
veerurajesh.s@gmail.com
password:william143


But where’s our posts app? It’s not displayed on the main admin page!

We need to explicitly tell Django what to display in the admin. Fortunately we can change fix this easily by opening the posts/admin.py file and editing it to look like this:

# posts/admin.py
from django.contrib import admin

from .models import Post

admin.site.register(Post)


Django now knows that it should display our posts app and its database model Post on the admin page. 
If you refresh your browser you’ll see that it now appears:

It will appear in the browser like when we create a new post Post object 1.we dont like this so we need to change the content.

Let’s change that. Within the posts/models.py file, add a new function __str__ as follows:

# posts/models.py
from django.db import models


class Post(models.Model):
    text = models.TextField()

 	def __str__(self):
        	return self.text[:50]


Much better! It’s a best practice to add str() methods to all of your models to improve their readability.


Views/Templates/URLs
In order to display our database content on our homepage, we have to wire up our views, templates, and URLConfs. 
This pattern should start to feel familiar now.

Let’s begin with the view. 
Earlier in the book we used the built-in generic TemplateView to display a template file on our homepage. 
Now we want to list the contents of our database model. 
Fortunately this is also a common task in web development and Django comes equipped with the generic class-based ListView.

In the posts/views.py file enter the Python code below:

# posts/views.py
from django.views.generic import ListView
from .models import Post


class HomePageView(ListView):
    model = Post
    template_name = 'home.html'


On the first line we’re importing ListView and in the second line we need to explicitly define which model we’re using. 
In the view, we subclass ListView, specify our model name and specify our template reference. 
Internally ListView returns an object called object_list that we want to display in our template.

In our templates file home.html we can use the Django Templating Language’s for loop to list all the objects in object_list. 
Remember that object_list is what ListView returns to us.

Why object_list? This is the name of the variable that ListView returns to us. 
So it’s hardcoded in which can be tricky to understand at first. 
Also note that we should specify not just the object we want, post, but the specific field we want to display which is text. 
So we will use post.text.


However object_list isn’t very friendly is it? In fact, it’s one of the common points of confusion for developers new to generic class-based views. 
So let’s instead provide an explicit name which we can do via context-object-name which is another Django best practice. 
It makes it easier for developers and especially designers to know what is contained in the template!

Back in our posts/views.py file add the following:

# posts/views.py
from django.views.generic import ListView
from .models import Post

class HomePageView(ListView):
    model = Post
    template_name = 'home.html'
    context_object_name = 'all_posts_list' # new
And don’t forget to update our template, too.

<!-- templates/home.html -->
<h1>Message board homepage</h1>
<ul>
  {% for post in all_posts_list %}
    <li>{{ post.text }}</li>
  {% endfor %}
</ul>

The last step is to set up our URLConfs. 
Let’s start with the project-level urls.py file where we simply include our posts and add include on the second line.



Everything works so it’s a good time to initialize our directory, add the new code, and include our first git commit.

(mb) $ git init
(mb) $ git add -A
(mb) $ git commit -m 'initial commit'


Tests
Previously we were only testing static pages so we used SimpleTestCase. 
But now that our homepage works with a database, we need to use TestCase which will let us create a “test” database we can check against. 
In other words, we don’t need to run tests on our actual database 
but instead can make a separate test database, fill it with sample data, and then test against it.

Let’s start by adding a sample post to the text database field and then check that it is stored correctly in the database. 
It’s important that all our test methods start with test_ so Django knows to test them! The code will look like this


# posts/tests.py
from django.test import TestCase
from .models import Post


class PostModelTest(TestCase):

    def setUp(self):
        Post.objects.create(text='just a test')

    def test_text_content(self):
        post=Post.objects.get(id=1)
        expected_object_name = f'{post.text}'
        self.assertEqual(expected_object_name, 'just a test')


At the top we import the TestCase module which lets us create a sample database, then import our Post model. 
We create a new class PostModelTest and add a method setUp to create a new database 
that has just one entry: a post with a text field containing the string ‘just a test’.

Then we run our first test, test_text_content, to check that the database field actually contains just a test. 
We create a variable called post that represents the first id on our Post model. 
Remember that Django automatically sets this id for us. 
If we created another entry it would have an id of 2, the next one would be 3, and so on.

The following line uses f strings which are a very cool addition to Python. 
They let us put variables directly in our strings as long as the variables are surrounded by brackets {}. 
Here we’re setting expected_object_name to be the string of the value in post.text, which should be just a test.

On the final line we use assertEqual to check that our newly created entry does in fact match what we input at the top. 
Go ahead and run the test on the command line with python manage.py test.


Don’t worry if the previous explanation felt like information overload. 
That’s natural the first time you start writing tests, but you’ll soon find that most tests that you write are actually quite repetitive.

Time for our second test. The first test was on the model but now we want test our one and only page: the homepage. 
Specifically, we want to test that it exists (throws an HTTP 200 response), uses the home view, and uses the home.html template.

We’ll need to add one more import at the top for reverse and a brand new class HomePageViewTest for our test.

Why does it say four tests? 
Remember that our setUp methods are not actually tests, they merely let us run subsequent tests. 
Our four actual tests are test_text_content, test_view_url_exists_at_proper_location, test_view_url_by_name, and test_view_uses_correct_template.

Any function that has the word test* at the beginning and exists in a tests.py file will be run when we execute the command python manage.py test.

We’re done adding code for our testing so it’s time to commit the changes to git.

(mb) $ git add -A
(mb) $ git commit -m 'added tests'


check here for how to deploy code in HEROKU