most used git commands in daily basis.

git status
git add
git commit
git fetch
git remote
git pull
git push
git diff
git log
git config

Git beyond Basics:
Git rebase
Git merge
Git Stash
Git reset


git help: 
Forgot a command? Type this into the command line to bring up the 21 most common git commands. 
You can also be more specific and type “git help init” or another term to figure out how to use 
and configure a specific git command


git config: 
Short for “configure,” this is most useful when you’re setting up Git for the first time.

git add: 
This does not add new files to your repository. 
Instead, it brings new files to Git’s attention. 
After you add files, they’re included in Git’s “snapshots” of the repository.


git init: 
Initializes a new Git repository. 
Until you run this command inside a repository or directory, it’s just a regular folder. 
Only after you input this does it accept further Git commands.


git status: 
Check the status of your repository. 
See which files are inside it, which changes still need to be committed, and which branch of the repository you’re currently working on.


git commit: 
Git’s most important command. 
After you make any sort of change, you input this in order to take a “snapshot” of the repository. 
Usually it goes git commit -m “Message here.”
The -m indicates that the following section of the command should be read as a message.

git checkout: 
Literally allows you to “check out” a repository that you are not currently inside. 
This is a navigational command that lets you move to the repository you want to check. 
You can use this command as git checkout master to look at the master branch, 
or git checkout cats to look at another branch.

git branch: 
Working with multiple collaborators and want to make changes on your own? 
This command will let you build a new branch, or timeline of commits, of changes and file additions that are completely your own. 
Your title goes after the command. 
If you wanted a new branch called “cats,” you’d type git branch cats.

git merge: 
When you’re done working on a branch, you can merge your changes back to the master branch, 
which is visible to all collaborators. 
git merge cats would take all the changes you made to the “cats” branch and add them to the master.

git push: 
If you’re working on your local computer, and want your commits to be visible online on GitHub as well, 
you “push” the changes up to GitHub with this command.

git pull: 
If you’re working on your local computer and want the most up-to-date version of your repository to work with, 
you “pull” the changes down from GitHub with this command.


Git --version: 				Tells you about version

Git help / git help command
Pwd : 					Gives you the working directory of repository
Cd .. : 				To go back
Ls : 					Gives you all folder
Cd nameOfFolder :			To move to the specified folder
Git init :				To make folder as a git repository (First move into the folder to make it as a repository)
Ls -la : 				Gives you the list of folder in repository that keep record of changes
Git add . :				To aware git to add the file in the directory it adds to the staging area  (. Means all) you can replace (.) With 						file name like second.txt

Git log : 				Gives you the commit history
Git log --author="CodeHotfix" : Gives you commit history of specific author
Git commit -m "Expressing the detail about change " : This will commit the changes with the note
Git --global Page on user.name "Code Hotfix"
Git --global user.email "codehotfix@github.com"
Git config --list


