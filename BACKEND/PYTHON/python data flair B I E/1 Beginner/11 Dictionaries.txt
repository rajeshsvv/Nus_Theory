2. An Introduction to Python Dictionaries
A real-life dictionary holds words and their meanings. 
As you can imagine, likewise, a Python dictionary holds key-value pairs. Let’s look at how to create one.


3. How to Create a Dictionary in Python?
Creating a Python Dictionary is easy as pie. 
Separate keys from values with a colon(:), and a pair from another by a comma(,). Finally, put it all in curly braces.

>>> {'PB&J':'Peanut Butter and Jelly','PJ':'Pajamas'}
{‘PB&J’: ‘Peanut Butter and Jelly’, ‘PJ’: ‘Pajamas’}

Optionally, you can put the dictionary in a variable. If you want to use it later in the program, you must do this.

>>> lingo={'PB&J':'Peanut Butter and Jelly','PJ':'Pajamas'}
To create an empty dictionary, simply use curly braces and then assign it to a variable

>>> dict2={}
>>> dict2
{}

>>> type(dict2)
<class ‘dict’>


						a. Python Dictionary Comprehension

You can also create a Python dict using comprehension. 
This is the same thing that you’ve learned in your math class. 
To do this, follow an expression pair with a for-statement loop in python. Finally, put it all in curly braces.

>>> mydict={x*x:x for x in range(8)}
>>> mydict
{0: 0, 1: 1, 4: 2, 9: 3, 16: 4, 25: 5, 36: 6, 49: 7}

In the above code, we created a Python dictionary to hold squares of numbers from 0 to 7 as keys, and numbers 0-1 as values.

								c. dict()


Using the dict() function, you can convert a compatible combination of constructs into a Python dictionary.

>>> dict(([1,2],[2,4],[3,6]))
{1: 2, 2: 4, 3: 6}

However, this function takes only one argument. 
So if you pass it three lists, you must pass them inside a list or a tuple. Otherwise, it throws an error.

>>> dict([1,2],[2,4],[3,6])
Traceback (most recent call last):

File “<pyshell#121>”, line 1, in <module>

dict([1,2],[2,4],[3,6])

TypeError: dict expected at most 1 arguments, got 3

d. Declaring one key more than once
Now, let’s try declaring one key more than once and see what happens.

>>> mydict2={1:2,1:3,1:4,2:4}
>>> mydict2
{1: 4, 2: 4}

As you can see, 1:2 was replaced by 1:3, which was then replaced by 1:4. This shows us that a dictionary cannot contain the same key twice.

e. Declaring an empty dictionary and adding elements later
When you don’t know what key-value pairs go in your Python dictionary,  you can just create an empty Python dict, and add pairs later.

>>> animals={}
>>> type(animals)
<class ‘dict’>

>>> animals[1]='dog'
>>> animals[2]='cat'
>>> animals[3]='ferret'
>>> animals
{1: ‘dog’, 2: ‘cat’, 3: ‘ferret’}

Any query on Python Dictionay yet? Leave a comment.

4. How to Access a Python Dictionary?
a. Accessing the entire Python dictionary
To get the entire dictionary at once, type its name in the shell.

>>> dict3
{1: ‘carrots’, ‘two’: [1, 2, 3]}

b. Accessing a value
To access an item from a list or a tuple, we use its index in square brackets. 
This is the python syntax to be followed. 
However, a Python dictionary is unordered. So to get a value from it, you need to put its key in square brackets.

To get the square root of 36 from the above dictionary, we write the following code.

>>> mydict[36]
6

c. get()
The Python dictionary get() function takes a key as an argument and returns the corresponding value.

>>> mydict.get(49)
7


Using the key in square brackets gives us a KeyError. Now let’s see what the get() method returns in such a situation.

>>> mydict.get(48)
>>>
As you can see, this didn’t print anything. Let’s put it in the print statement to find out what’s going on.

>>> print(mydict.get(48))
None

So we see, when the key doesn’t exist, the get() function returns the value None.

					
						a. Updating the Value of an Existing Key


If the key already exists in the Python dictionary, you can reassign its value using square brackets.

Let’s take a new Python dictionary for this.

>>> dict4={1:1,2:2,3:3}
Now, let’s try updating the value for the key 2.

>>> dict4[2]=4
>>> dict4
{1: 1, 2: 4, 3: 3}

						b. Adding a new key

However, if the key doesn’t already exist in the dictionary, then it adds a new one.

>>> dict4[4]=6
>>> dict4
{1: 1, 2: 4, 3: 3, 4: 6}

Python dictionary cannot be sliced.

					6. How to Delete Python Dictionary?

You can delete an entire dictionary. 
Also, unlike a tuple, a Python dictionary is mutable. So you can also delete a part of it.


					7. In-Built Functions on a Python Dictionary

len() 		all() 			any() 			sorted()

A function is a procedure that can be applied on a construct to get a value. 
Furthermore, it doesn’t modify the construct. Python gives us a few functions that we can apply on a Python dictionary. Take a look.


dict4={1:1,2:2,3:3,4:4}

a. len()
The len() function returns the length of the dictionary in Python. Every key-value pair adds 1 to the length.

>>> len(dict4)
3



b. any()
Like it is with lists an tuples, the any() function returns True if even one key in a dictionary has a Boolean value of True.

>>> any({False:False,'':''})
False

>>> any({True:False,"":""})
True

>>> any({'1':'','':''})
True


c. all()
Unlike the any() function, all() returns True only if all the keys in the dictionary have a Boolean value of True.

>>> all({1:2,2:'',"":3})
False

d. sorted()
Like it is with lists and tuples, the sorted() function returns a sorted sequence of the keys in the dictionary. 
The sorting is in ascending order, and doesn’t modify the original Python dictionary.

But to see its effect, let’s first modify dict4.

>>> dict4={3:3,1:1,4:4}
Now, let’s apply the sorted() function on it.

>>> sorted(dict4)
[1, 3, 4]
Now, let’s try printing the dictionary dict4 again.

>>> dict4
{3: 3, 1: 1, 4: 4}

As you can see, the original Python dictionary wasn’t modified.

This function returns the keys in a sorted list. To prove this, let’s see what the type() function returns.

>>> type(sorted(dict4))
<class ‘list’>

This proves that sorted() returns a list.
An empty Python dictionary has a length of 0.

>>> len({})


			# Built in Methods in Dictionary


keys()			values()			items() 		get()
clear() 		copy()				pop()			popitem()
fromkeys()		update()

